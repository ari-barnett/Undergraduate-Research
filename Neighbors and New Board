#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb 20 22:38:40 2021

@author: ajbarnett

Neighbors method - work on integrating into more tomorrow 
"""

import numpy as np
import random 
grid = []
r = int(input("Indicate number of rows/columns: "))
print('')
c = r
n = 0
m = 0
length = r*c


def find_neighbors(matrix, r, c):
    def get(r, c):
        if 0 <= r < len(matrix) and 0 <= c < len(matrix[r]):
            return matrix[r][c]
        else:
            return 0
    neighbors_list = [get(r-1, c-1), get(r-1, c), get(r-1, c+1),
                      get(r  , c-1),              get(r  , c+1),
                      get(r+1, c-1), get(r+1, c), get(r+1, c+1)]
    return sum(map(bool, neighbors_list))

for row in range(r):  
    grid.append([])
    for column in range(c):        
        grid[row].append(random.randint(0,1))
        x = np.array(grid)
        
find_neighbors(x,m,n)
new = np.copy(x)
print('ORIGINAL BOARD')
print(x)
print('')

print('INDEX w/ # OF NEIGHBORS')
for idx, i in np.ndenumerate(x):
    print((m,n), find_neighbors(x,m,n))
    
    if i == 0 and find_neighbors(x,m,n) == 3:
        new[m,n] = 1
    elif i == 1 and find_neighbors(x,m,n) in (2,3):
        new[m,n] = 1
    elif i == 1 and find_neighbors(x,m,n) >= 4:
        new[m,n] = 0
    elif i == 1 and find_neighbors(x,m,n) < 2:
        new[m,n] = 0
    else:
        new[m,n] = 0
    
    n = n + 1 
    if (n % c) == 0:
        m = m + 1
        n = n - c
        
print('')  
print('NEW BOARD')
print(new)
